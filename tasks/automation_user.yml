- name: show automation-related variables
  ansible.builtin.debug:
    msg:
      automation_user: "{{ automation_user }}"
      desktop_user: "{{ desktop_user | default('UNSET') }}"
      desktop_home: "{{ desktop_home | default('UNSET') }}"
      ansible_user_id: "{{ ansible_user_id | default('UNSET') }}"
      become: "{{ become | default('UNSET') }}"
  tags: [automation_user, debug_pre]

- name: check if automation user exists (pre)
  ansible.builtin.getent:
    database: passwd
    key: "{{ automation_user }}"
  register: automation_user_getent_pre
  failed_when: false
  changed_when: false
  tags: [automation_user, debug_pre]

- name: print pre-state for automation user
  ansible.builtin.debug:
    msg:
      exists: "{{ automation_user_getent_pre.ansible_facts is defined and automation_user_getent_pre.ansible_facts.getent_passwd is defined and (automation_user in automation_user_getent_pre.ansible_facts.getent_passwd) }}"
      getent_fields: "{{ (automation_user_getent_pre.ansible_facts.getent_passwd[automation_user]) | default([]) }}"
  tags: [automation_user, debug_pre]

- name: list users with uid >= 1000 (for visibility)
  ansible.builtin.command:
    argv:
      - awk
      - -F:
      - "$3 >= 1000 { print $1 \":\" $3 }"
      - /etc/passwd
  register: high_uid_users
  changed_when: false
  failed_when: false
  tags: [automation_user, debug_pre]

- name: print users with uid >= 1000
  ansible.builtin.debug:
    var: high_uid_users.stdout_lines
  tags: [automation_user, debug_pre]

- name: add automation user
  ansible.builtin.user:
    name: "{{ automation_user }}"
    system: true
    state: present
  tags: [automation_user, create_user]

- name: check if automation user exists (post)
  ansible.builtin.getent:
    database: passwd
    key: "{{ automation_user }}"
  register: automation_user_getent_post
  failed_when: false
  changed_when: false
  tags: [automation_user, debug_post]

- name: print post-state for automation user
  ansible.builtin.debug:
    msg:
      exists: "{{ automation_user_getent_post.ansible_facts is defined and automation_user_getent_post.ansible_facts.getent_passwd is defined and (automation_user in automation_user_getent_post.ansible_facts.getent_passwd) }}"
      getent_fields: "{{ (automation_user_getent_post.ansible_facts.getent_passwd[automation_user]) | default([]) }}"
  tags: [automation_user, debug_post]

- name: set up sudo for ansible user
  ansible.builtin.copy:
    dest: "/etc/sudoers.d/{{ automation_user }}"
    owner: root
    group: root
    mode: "0440"
    content: "{{ automation_user }} ALL=(ALL) NOPASSWD: ALL"
  tags: [automation_user, sudoers]
